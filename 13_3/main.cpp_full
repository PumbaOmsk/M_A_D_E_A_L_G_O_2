/**
 * Введенский Вячеслав В. MADE-ML-22
 *
C. Площади. Даны n прямых на плоскости. Они делят плоскость на части, некоторые из которых конечны,
 некоторые — бесконечны. Найдите площади всех конечных частей.
 */

#include <iostream>
#include <cmath>
#include <vector>
#include <random>
#include <algorithm>

const long MAX_POINT = static_cast<const long>(1e8);
const long double MAX_AREA = static_cast<const long double>(1e-8);
const double EPS = 1e-10;
using namespace std;


struct LPoint2D {
    LPoint2D(long _x, long _y) : x(_x), y(_y) {}

    LPoint2D() : x(0), y(0) {}

    long x, y;

    bool operator==(const LPoint2D &other) const {
        return x == other.x && y == other.y;
    }

    LPoint2D &operator=(const LPoint2D &other) = default;

    long double dist(const LPoint2D &other) const {
        return sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));
    }

    long dist_sq(const LPoint2D &other) const {
        return (x - other.x) * (x - other.x) + (y - other.y) * (y - other.y);
    }

    long mult(const LPoint2D &other) const {
        return x * other.y - y * other.x;
    }

};

struct DPoint2D {
    DPoint2D(long double _x, long double _y) : x(_x), y(_y) {}

    DPoint2D() : x(0), y(0) {}

    long double x, y;

    bool operator==(const DPoint2D &other) const {
        return abs(x - other.x) < EPS && abs(y - other.y) < EPS;
    }

    long double mult(const DPoint2D &other) const {
        return x * other.y - y * other.x;
    }

    long double dist(const DPoint2D &other) const {
        return sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));
    }

    long double dist(const LPoint2D &other) const {
        return sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));
    }
};

DPoint2D center(const LPoint2D &p1, const LPoint2D &p2) {
    return {(p1.x + p2.x) / 2., (p1.y + p2.y) / 2.};
}

struct Line2D {
    Line2D(long _a, long _b, long _c) : a(_a), b(_b), c(_c) {}

    Line2D() : a(0), b(0), c(0) {}

    long a, b, c;

    int value(const LPoint2D p) const {
        return p.x * a + p.y * b + c;
    }

    double value(const DPoint2D p) const {
        return p.x * a + p.y * b + c;
    }
};

struct DLine2D {
    DLine2D(double _a, double _b, double _c) : a(_a), b(_b), c(_c) {}

    DLine2D() : a(0), b(0), c(0) {}

    DLine2D(const DPoint2D &p1, const DPoint2D &p2) {
        a = p1.y - p2.y;
        b = p2.x - p1.x;
        auto len = sqrt(a * a + b * b);
        a /= len;
        b /= len;
        c = (-a * p1.x - b * p1.y);
    }

    DLine2D(const LPoint2D &p1, const LPoint2D &p2) {
        a = p1.y - p2.y;
        b = p2.x - p1.x;
        auto len = sqrt(a * a + b * b);
        a /= len;
        b /= len;
        c = (-a * p1.x - b * p1.y);
    }

    long double a, b, c;

    long double value(const LPoint2D p) const {
        return p.x * a + p.y * b + c;
    }

    double sign(const DPoint2D p) const {
        auto v = p.x * a + p.y * b + c;
        if (v > EPS)
            return 1;
        if (v < -EPS)
            return -1;
        return 0;
    }
};

long double det(long double a11, long double a12, long double a21, long double a22) {
    auto d = a11 * a22 - a12 * a21;
    return d;
}

long long det(long a11, long a12, long a21, long a22) {
    return a11 * a22 - a12 * a21;
}

DPoint2D cross(const DLine2D &l1, const DLine2D &l2) {
    long double d = det(l1.a, l1.b, l2.a, l2.b);
    auto dx = det(l1.b, l1.c, l2.b, l2.c);
    auto dy = det(l1.c, l1.a, l2.c, l2.a);

    return {static_cast<double>(dx / d), static_cast<double>(dy / d)};

}

struct DPoly2D {
    vector<DPoint2D> points;

    void add(const DPoint2D &p) {
        points.push_back(p);
    }
    int size()const{
        return points.size();
    }
    DPoint2D& operator [] (int idx){
        return points[idx];
    }
    const DPoint2D& operator [] (int idx)const {
        return points[idx];
    }
};

pair<DPoly2D,DPoly2D> cut(const DPoly2D &poly, const DLine2D &line) {
    DPoly2D result1;
    DPoly2D result2;
    auto psz = poly.size();
    for (int i = 0; i < psz; ++i) {
        auto p1 = poly[i];
        int i1 = (i + 1) % psz;
        DPoint2D p2 = poly[i1];
        auto lsgn1 = line.sign(p1);
        if (lsgn1 >= 0) {
            result1.add(p1);
        }
        if (lsgn1 <= 0) {
            result2.add(p1);
        }

        if (lsgn1 * line.sign(p2) < 0) {
            auto _a = p1.y - p2.y;
            auto _b = p2.x - p1.x;
            auto len = sqrt(_a * _a + _b * _b);
            _a /= len;
            _b /= len;
            auto _c = (-_a * p1.x - _b * p1.y);// /len;
            DPoint2D p = cross(line, DLine2D(_a, _b, _c));
            result1.add(p);
            result2.add(p);
        }
    }
    return make_pair(result1,result2);
}

vector<DPoly2D> cutAll(const vector<DPoly2D> &areas, const DLine2D &line) {
    vector<DPoly2D> result;
    for (int i = 0; i < areas.size(); ++i) {
        auto ps = cut(areas[i],line);
        if(ps.first.size()>2)
            result.push_back(ps.first);
        if(ps.second.size()>2)
            result.push_back(ps.second);

//        auto pi = points[i];
//        int i1 = (i + 1) % points.size();
//        DPoint2D pi1 = points[i1];
//        if (hp.sign(pi) >= 0) {
//            result.push_back(pi);
//        }
//        if (hp.sign(pi) * hp.sign(pi1) < 0) {
//            auto _a = pi.y - pi1.y;
//            auto _b = pi1.x - pi.x;
//            auto len = sqrt(_a * _a + _b * _b);
//            _a /= len;
//            _b /= len;
//            auto _c = (-_a * pi.x - _b * pi.y);// /len;
//            DPoint2D p = cross(hp, DLine2D(_a, _b, _c));
//            result.push_back(p);
//        }
    }
    return result;
}

long double computeArea(const DPoly2D &area) {
    long double sq = 0;
    auto psz = area.size();
    for (int i = 0; i < psz; ++i) {
        auto pi = area[i];
        int i1 = (i + 1) % psz;
        DPoint2D pi1 = area[i1];
        sq += pi.mult(pi1);
    }
    return sq / 2.;
}


//
//struct LCircle2D {
//    LCircle2D() : r(0) {}
//
//    LCircle2D(long _x, long _y, long _r) : p(_x, _y), r(_r) {}
//
//    LPoint2D p;
//    long r;
//};
//
//struct DCircle2D {
//    DCircle2D() : r(0) {}
//
//    DCircle2D(long double _x, long double _y, long double _r) : p(_x, _y), r(_r) {}
//    DCircle2D(const DPoint2D _p, long double _r) : p(_p), r(_r) {}
//
//    DPoint2D p;
//    long double r;
//
//    bool sign(const LPoint2D &other) {
//        auto d2 = (p.x - other.x) * (p.x - other.x) + (p.y - other.y) * (p.y - other.y);
//        if (d2 > r * r + EPS)
//            return 1;
//        if (d2 < r * r - EPS)
//            return -1;
//        return 0;
//    }
//};

//DCircle2D minCircle(const LPoint2D &p1, const LPoint2D &p2) {
//    long double dist = p1.dist(p2);
//    return {(p1.x + p2.x) / 2., (p1.y + p2.y) / 2., dist / 2};
//}
//bool atOneLineOrObtuse(const LPoint2D &p1, const LPoint2D &p3, const LPoint2D &p2){
//    LPoint2D p12(p2.x-p1.x,p2.y-p1.y);
//    LPoint2D p13(p3.x-p1.x,p3.y-p1.y);
//    if(p12.mult(p13)==0)
//        return true;
//    auto d12 = p1.dist_sq(p2);
//    auto d13 = p1.dist_sq(p3);
//    auto d23 = p2.dist_sq(p3);
//    if(d12>d13 && d12>d23){
//        return d12>d13+d23;
//    }
//    if(d13>d12 && d13>d23){
//        return d13>d12+d23;
//    }
//    if(d23>d12 && d23>d12){
//        return d23>d12+d13;
//    }
//
//    return false;
//}
vector<DPoly2D> findManyCrossAreas(const vector<DPoly2D> &areas, const vector<DLine2D> &lines) {
    vector<DPoly2D> result(areas);
    for (int i = 0; i < lines.size(); ++i) {
        result = cutAll(result,lines[i]);
    }
    return result;
}
bool crossBorder(const DPoly2D& area ){
    for (int i = 0; i < area.size(); ++i) {
        if(abs(abs(area[i].x)-MAX_POINT)<=EPS || abs(abs(area[i].y)-MAX_POINT)<=EPS)
            return true;
    }
    return false;
}
vector<DPoly2D> filter(const vector<DPoly2D> &areas) {
    vector<DPoly2D> result;
    for (int i = 0; i < areas.size(); ++i) {
        if (!crossBorder(areas[i])){
            result.push_back(areas[i]);
        }
    }
    return result;
}
int main() {
    vector<DPoly2D> areas;

    DPoly2D poly;
    poly.add({-MAX_POINT, -MAX_POINT});
    poly.add({MAX_POINT, -MAX_POINT});
    poly.add({MAX_POINT, MAX_POINT});
    poly.add({-MAX_POINT, MAX_POINT});
    areas.push_back(poly);

    vector<DLine2D> lines;
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        DPoint2D a, b;
        cin >> a.x >> a.y >> b.x >> b.y;
        lines.emplace_back(a, b);
    }
    areas = findManyCrossAreas(areas, lines);
    areas = filter(areas);
    vector<long double> sq;
    for (int i = 0; i < areas.size(); ++i) {
        long double s = computeArea(areas[i]);
        if(s>=MAX_AREA){
            sq.push_back(s);
        }
    }
    sort(sq.begin(),sq.end());
    cout << fixed;
    cout.precision(8);
    cout << sq.size()<<"\n";
    for(auto s:sq){
        cout << s<<"\n";
    }
    cout<<endl;
    return 0;
}

/*
6
0 0 1 0
1 0 1 1
1 1 0 1
0 1 0 0
0 0 1 1
0 1 1 0

5
0 0 1 0
1 0 1 1
1 1 0 1
0 1 0 0
0 0 1 1


 * */