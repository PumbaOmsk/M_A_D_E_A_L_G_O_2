/**
 * Введенский Вячеслав В. MADE-ML-22
 *
 E. Криптография
crypto.in , crypto.out
Задано n матриц A1, A2, ..., An размера 2 × 2. Необходимо для нескольких запросов вычислить произведение матриц
 Ai, Ai + 1, ..., Aj. Все вычисления производятся по модулю r.
Входные данные: Первая строка входного файла содержит числа r (1 ≤ r ≤ 10 000), n(1 ≤ n ≤ 200 000) и m(1 ≤ m ≤ 200 000).
Следующие n блоков по две строки содержащие по два числа в строке — описания матриц. Затем следуют m пар целых чисел
 от 1 до n, запросы на произведение на отрезке.
Выходные данные: Выведите m блоков по две строки,по два числа в каждой — произведения на отрезках. Разделяйте
блоки пустой строкой. Все вычисления производятся по модулю r

 */
//#include <iostream>
#include <vector>
#include <random>
#include <fstream>

using namespace std;

void Set(vector<long> &m, long v, long e0, long e1, long e2, long e3) {
    m[v + 0] = e0;
    m[v + 1] = e1;
    m[v + 2] = e2;
    m[v + 3] = e3;
}

void Mult(vector<long> &p, long v, long a0, long a1, long a2, long a3, long mod) {
    long b0, b1, b2, b3;
    b0 = (p[v + 0] * a0 + p[v + 1] * a2) % mod;
    b1 = (p[v + 0] * a1 + p[v + 1] * a3) % mod;
    b2 = (p[v + 2] * a0 + p[v + 3] * a2) % mod;
    b3 = (p[v + 2] * a1 + p[v + 3] * a3) % mod;
    Set(p, v, b0, b1, b2, b3);
}

/**
 * вернуть минимальный элемент на подотрезке.
 * @param a левая граница исходного отрезка.
 * @param b правая граница исходного отрезка.
 * @return минимальный элемент.
 */
vector<long> Rsq(vector<long> &T, int v, int l, int r, int a, int b, long mod) {
    if (l > b || r < a) {
        vector<long> E(4, 0);
        E[0]=1;
        E[3]=1;
        return E;
    }
    if (l >= a && r <= b) {
        vector<long> res(4, 0);
        auto idx = v<<2;
        Set(res, 0, T[idx + 0], T[idx + 1], T[idx + 2], T[idx + 3]);
        return res;
    }
    int m = (l + r) >> 1;
    vector<long> res(4, 0);
    Set(res, 0, 1, 0, 0, 1);
    auto dx = v<<1;
    auto lv = Rsq(T, dx + 1, l, m, a, b, mod);
    auto rv = Rsq(T, dx + 2, m + 1, r, a, b, mod);
    Mult(res, 0, lv[0], lv[1], lv[2], lv[3], mod);
    Mult(res, 0, rv[0], rv[1], rv[2], rv[3], mod);
    return res;
}

//#include <chrono>
//#include <iostream>
//
//class Timer {
//    using clock_t = std::chrono::high_resolution_clock;
//    using microseconds = std::chrono::microseconds;
//public:
//    Timer() : start_(clock_t::now()) {}
//
//    ~Timer() = default;
//
//    void print(const std::string &s, int count) {
//        const auto finish = clock_t::now();
//        const auto us =
//                std::chrono::duration_cast<microseconds>
//                        (finish - start_).count();
//        std::cout << s << ": " << us / count << " us" << std::endl;
//    }
//
//    void print(const std::string &s) {
//        print(s, 1);
//    }
//
//private:
//    const clock_t::time_point start_;
//};

int main() {
    int r, n, m;
    ifstream fin("crypto.in");
    ofstream fout("crypto.out");

// crypto.in , crypto.out
    fin >> r >> n >> m;

    int bound = 1;
    while (bound < n) {
        bound = bound << 1;
    }
    long long size = 2 * bound - 1;

    vector<long> T(4 * size, 0);
    for (int i = 0; i < size; ++i) {
        T[4 * i + 0] = 1;
        T[4 * i + 3] = 1;
    }
//    Timer t;
    for (int i = 0; i < n; ++i) {
        fin >> T[4 * (bound - 1 + i) + 0] >> T[4 * (bound - 1 + i) + 1]
            >> T[4 * (bound - 1 + i) + 2] >> T[4 * (bound - 1 + i) + 3];
    }


    for (int v = bound - 2; v >= 0; v--) {

        Mult(T, 4 * v, T[4 * (2 * v + 1) + 0], T[4 * (2 * v + 1) + 1], T[4 * (2 * v + 1) + 2], T[4 * (2 * v + 1) + 3],
             r);
        Mult(T, 4 * v, T[4 * (2 * v + 2) + 0], T[4 * (2 * v + 2) + 1], T[4 * (2 * v + 2) + 2], T[4 * (2 * v + 2) + 3],
             r);
    }
    for (int row = 0; row < m; ++row) {
        long i, j;
        fin >> i >> j;
        auto res = Rsq(T, 0, 0, bound - 1, i - 1, j - 1, r);
        fout << res[0] << " " << res[1] << "\n";
        fout << res[2] << " " << res[3] << "\n";
        fout << "\n";
    }
//    t.print("calc");
    fout<<flush;
    return 0;
}
/**
3 4 4
0 1
0 0

2 1
1 2

0 0
0 2

1 0
0 2

1 4
2 3
1 3
2 2

 --------
 0 2
0 0

0 2
0 1

0 1
0 0

2 1
1 2


 */