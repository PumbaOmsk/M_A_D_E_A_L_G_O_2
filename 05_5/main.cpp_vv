/**
 * Введенский Вячеслав В. MADE-ML-22
 *
 E. Криптография
crypto.in , crypto.out
Задано n матриц A1, A2, ..., An размера 2 × 2. Необходимо для нескольких запросов вычислить произведение матриц
 Ai, Ai + 1, ..., Aj. Все вычисления производятся по модулю r.
Входные данные: Первая строка входного файла содержит числа r (1 ≤ r ≤ 10 000), n(1 ≤ n ≤ 200 000) и m(1 ≤ m ≤ 200 000).
Следующие n блоков по две строки содержащие по два числа в строке — описания матриц. Затем следуют m пар целых чисел
 от 1 до n, запросы на произведение на отрезке.
Выходные данные: Выведите m блоков по две строки,по два числа в каждой — произведения на отрезках. Разделяйте
блоки пустой строкой. Все вычисления производятся по модулю r

 */
//#include <iostream>
#include <vector>
#include <random>
#include <fstream>

using namespace std;

void Set(vector<long> &m, long e0, long e1, long e2, long e3) {
    m[0] = e0;
    m[1] = e1;
    m[2] = e2;
    m[3] = e3;
}

void Mult(vector<long> &p, const vector<long> &a, long mod) {
    long b0, b1, b2, b3;
    b0 = (p[0] * a[0] + p[1] * a[2]) % mod;
    b1 = (p[0] * a[1] + p[1] * a[3]) % mod;
    b2 = (p[2] * a[0] + p[3] * a[2]) % mod;
    b3 = (p[2] * a[1] + p[3] * a[3]) % mod;
    Set(p, b0, b1, b2, b3);
}

/**
 * вернуть минимальный элемент на подотрезке.
 * @param a левая граница исходного отрезка.
 * @param b правая граница исходного отрезка.
 * @return минимальный элемент.
 */
vector<long> Rsq(vector<vector<long>> &T, int v, int l, int r, int a, int b,long mod) {
    if (l > b || r < a) {
        vector<long> E(4,0);
        Set(E,1,0,0,1);
        return E;
    }
    if (l >= a && r <= b) {
        return T[v];
    }
    int m = (l + r) >> 1;
    vector<long> res(4,0);
    Set(res,1,0,0,1);
    auto lv = Rsq(T, 2 * v + 1, l, m, a, b,mod);
    auto rv = Rsq(T, 2 * v + 2, m + 1, r, a, b,mod);
    Mult(res,lv,mod);
    Mult(res,rv,mod);
    return res;
}

int main() {
    int r, n, m;
    ifstream fin("crypto.in");
    ofstream fout("crypto.out");

// crypto.in , crypto.out
    fin >>r>> n>>m;

    int bound = 1;
    while (bound < n) {
        bound = bound << 1;
    }
    long long size = 2 * bound - 1;
    vector<long> E(4, 0);
    Set(E, 1, 0, 0, 1);
    vector<vector<long>> T(size, E);

    for (int i = 0; i < n; ++i) {
        fin >> T[bound - 1 + i][0] >> T[bound - 1 + i][1] >> T[bound - 1 + i][2] >> T[bound - 1 + i][3];
    }
    for (int v = bound - 2; v >= 0; v--) {
        Mult(T[v],T[2 * v + 1],r);
        Mult(T[v],T[2 * v + 2],r);
    }

    for (int row = 0; row < m; ++row) {
        long i, j;
        fin >> i >> j;
        auto res = Rsq(T, 0, 0, bound - 1, i - 1, j - 1,r);
        fout << res[0] << " " << res[1] << "\n";
        fout << res[2] << " " << res[3] << "\n";
        fout << endl;
    }
    return 0;
}
/**
3 4 4
0 1
0 0

2 1
1 2

0 0
0 2

1 0
0 2

1 4
2 3
1 3
2 2

 --------
 0 2
0 0

0 2
0 1

0 1
0 0

2 1
1 2


 */