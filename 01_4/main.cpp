/*
 * Введенский Вячеслав В. MADE-ML-22

D. Расстояние по Левенштейну

Дана текстовая строка. С ней можно выполнять следующие операции:
1. Заменить один символ строки на другой символ.
2. Удалить один произвольный символ.
3. Вставить произвольный символ в произвольное место строки.

Минимальное количество таких операций, при помощи которых можно из одной строки получить другую,
 называется стоимостью редактирования или расстоянием Левенштейна.

Определите расстояние Левенштейна для двух данных строк.

 Входные данные
Программа получает на вход две строки, длина каждой из которых не превосходит 1000 символов, строки состоят только из заглавных латинских букв.

 Выходные данные
Требуется вывести одно число — расстояние Левенштейна для данных строк.
 * */
#include <stack>
#include <iostream>

using namespace std;
/**
 * Стоимость замены символа c1 на с2 (если равны 0, иначе 1).
 * @param c1 символ.
 * @param c2 символ.
 * @return стоимость замены.
 */
int exchange(const char &c1, const char &c2) {
    if(c1==c2)
        return 0;
    return 1;
}
/**
 * Расчёт одного значения матрицы.
 * @param i строка.
 * @param j столбец
 * @param dp матрица расстояний.
 * @param s1 строка 1.
 * @param s2 строка 2.
 * @return значение расстояния в матрице для указанных строки и столбца.
 */
int calc_d(int i, int j, int **dp, const string &s1, const string &s2) {
    if (i == 0 && j == 0)
        return 0;
    if (i == 0)
        return j;
    if (j == 0)
        return i;
    int d1 = dp[i][j - 1] + 1;
    int d2 = dp[i - 1][j] + 1;
    int d3 = dp[i - 1][j-1] + exchange(s2[i-1],s1[j-1]);
    return min(d1,min(d2,d3));
}

/**
 * Расстояние Левенштейна между строками.
 * @param s1 строка.
 * @param s2 строка.
 * @return расстояние Левенштейна.
 */
int levenstein_dist(const string &s1, const string &s2) {
    size_t n = s1.size() + 1; // столбцы 1я строка+пустой
    size_t m = s2.size() + 1; // строки 2я строка+пустой
    int **dp = new int *[m];
    for (int i = 0; i < m; ++i) {
        dp[i] = new int[n];
    }

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int value = calc_d(i, j, dp, s1, s2);
            dp[i][j] = value;
        }
    }
    int distance = dp[m - 1][n - 1];

    for (int i = 0; i < m; ++i) {
        delete[] dp[i];
    }
    delete[] dp;
    return distance;
}

int main() {
    string s1, s2;
    cin >> s1 >> s2;

    cout << levenstein_dist(s1, s2) << endl;
    return 0;
}