Работа программы:
1. Данные могут быть считаны из файла или стандартного потока.
2. Для того, чтобы за раз скормить несколько программ можно их разделить строками вида ":----" 
3. task10 test.eq - прогонит тесты.
4. Считываются все строки и отдаются в Lexer.
5. Lexer может отдавать данные по токенам.
6. Parser инициализируется лексером и строит дерево.
7. Дерево отдает в Computer и он по дереву производит вычисления.

Договоренности:
1. переменные - маленькие латинские буквы.
2. тип данных - целые числа, даже для деления. (нет сложностей прикрутить разные типы, но так сделал)
3. +, -, *, /, (, ), {, } , if, else, while
4. перезапись переменных есть
5. ошибки по возможности обрабатываются
6. тесты что-то проверяют.
7. if(Expr) { } else{}  - в качестве условия проверяется на !=0 любое валидное выражение. 
Фигурные скобки обязательны. else - может отсутствовать
8. while(Expr) { } - в качестве условия проверяется на !=0 любое валидное выражение. Фигурные скобки обязательны. 
Есть ограничение на количество итераций в цикле. Чтобы это можно было проверить тестом - стоит константа MAX_WHILE_COUNT = 30. 

Грамматика:
S -> Prog          // просто, чтобы программа вычислений имела собственную вершину в дереве.
Prog -> Block      // блок кода
Block -> State Eol Block | e    // блок может состоять из нескольких состояний
State -> Var = Expr | If | While    // состояние или имя=выражение, или if, или while
Expr -> Mult Add                    // выражение разбивается на мультипликативные и аддитивные
Add -> + Mult Add | - Mult Add | e  // вторая часть аддитивной (1-й является выражение)
Mult -> Base Mult_2                 // первая часть мультипликативной
Mult_2 -> * Base Mult_2 | / Base Mult_2 | e   // вторая часть мультипликативной
Base -> number | Var | Parentheses           // основа число, имя переменной, выражение в круглых скобках
Parentheses -> (Expr)                        // выражение в круглых скобках

If -> Parentheses IfTrue IfFalse     // if состоит из выражения в круглых скобках, первой части (условие истинно) и второй части(ложно)
While -> Parentheses IfTrue         // while состоит из выражения в круглых скобках и первой части (условие истинно)
IfTrue -> { Block }                 // первая часть - это блок кода в фигурных скобках
IfFalse -> else { Block } | e       // вторая часть - это else и блок кода в фигурных скобках, но может и не быть
Var -> variable_name                // просто имя переменной