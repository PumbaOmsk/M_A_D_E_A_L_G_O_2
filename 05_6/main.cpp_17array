#define _DEBUG_
/**
 * Введенский Вячеслав В. MADE-ML-22
 *
F. RMQ наоборот
rmq.in, rmq.out
Рассмотрим массив a[1..n]. Пусть Q(i, j) — ответ на запрос о нахождении минимума среди чисел a[i], ..., a[j].
 Вам даны несколько запросов и ответы на них. Восстановите исходный массив.
Входные данные: Первая строка входного файла содержит число n — размер массива, и m — число запросов (1 ≤ n, m ≤ 100 000).
 Следующие m строк содержат по три целых числа i, j и q, означающих, что Q(i, j) = q (1 ≤ i ≤ j ≤ n,  - 2^31 ≤ q ≤ 2^31 - 1).
Выходные данные: Если искомого массива не существует, выведите строку «inconsistent».
В противном случае в первую строку выходного файла выведите «consistent». Во вторую строку выходного файла выведите
 элементы массива. Элементами массива должны быть целые числа в интервале от  - 2^31 до 2^31 - 1 включительно.
 Если решений несколько, выведите любое.
 */
//#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

#ifdef _DEBUG_
#include <iostream>
#include <random>
#include <chrono>
#include <iostream>


class Timer {
    using clock_t = std::chrono::high_resolution_clock;
    using microseconds = std::chrono::microseconds;
public:
    Timer() : start_(clock_t::now()) {}

    ~Timer() = default;

    void print(const std::string &s, int count) {
        const auto finish = clock_t::now();
        const auto us =
                std::chrono::duration_cast<microseconds>
                        (finish - start_).count();
        std::cout << s << ": " << us / count << " us" << std::endl;
    }

    void print(const std::string &s) {
        print(s, 1);
    }

private:
    const clock_t::time_point start_;
};
#endif
using namespace std;
/**
 * Максимальный элемент массива.
 */
const long long INF = static_cast<const long long int>(1e18);
const long long MAX_VALUE = (1LL << 31) - 1;
/**
 * Максимальный элемент массива.
 */
const long long MOD = 1LL << 31;

//bool compareA(const vector<long long> &e1,const vector<long long> &e2){
//    if(e1[0]==e2[0])
//        return e1[2]<e2[2];
//    return e1[0]<e2[0];
//}
//bool compareC(const vector<long long> &e1,const vector<long long> &e2){
//    if(e1[2]==e2[2])
//        return e1[0]<e2[0];
//    return e1[2]<e2[2];
//}
//pair<bool, vector<long long >> FindA(vector<vector<long long>> &q,int n) {
//    sort(q.begin(),q.end(),compareC);
//    vector<long long> check(n,INF);
//    auto m = q.size();
//    for(int i=0; i < m; i++){
//        auto begin = q[i][0];
//        auto endC = q[i][1];
//        auto elem = q[i][2];
//        bool inconsistent = true;
//        for (auto j = begin; j <=endC ; ++j) {
//            if(check[j]>=elem) {
//                check[j] = elem;
//                inconsistent = false;
//            }
//        }
//        if(inconsistent){
//            return make_pair(false, check);
//        }
//    }
//
//    sort(q.begin(),q.end(),compareA);
//    vector<long long> a(n,INF);
//    for(int i=0; i < m; i++){
//        auto begin = q[i][0];
////        auto endA = min(q[i][1],(i+1 < m) ? q[i + 1][0] - 1 : q[i][1]);
//        auto endA = (i+1 < m) ? q[i + 1][0] - 1 : q[i][1];
//        auto elem = q[i][2];
//        for (auto j = begin; j <=endA ; ++j) {
//            if(a[j]==INF) {
//                a[j] = elem;
//            }
//        }
//    }
//    return make_pair(true,a);
//}

bool compare(const vector<long long> &e1, const vector<long long> &e2) {
    return e1[2] < e2[2];
}

void FillA(const long long *q,int m,int n, long long *a) {
//    sort(q.begin(), q.end(), compare);
//    vector<long long> a(n, MAX_VALUE);
//    auto *a = new long long [n];
#ifdef _DEBUG_
    Timer t;
#endif

    for (int i = 0; i < m; i++) {
        int dx = i * 3;
//        auto elem = q[dx + 2];
        for (auto j = q[dx + 0]; j <= q[dx + 1]; ++j) {
            if (q[dx + 2] > a[j])
                a[j] = q[dx + 2];
        }
    }
#ifdef _DEBUG_
    t.print("fill");
#endif

    for (int i = 0; i < n; ++i) {
        if (a[i] == -INF)
            a[i] = MAX_VALUE;
    }


//    for (int i = 0; i < n; ++i) {
//        for (int j = 0; j < m; ++j) {
//            if(q[j][0]<=i && i<=q[j][1] && a[i]<q[j][2]){
//                a[i]=q[j][2];
//            }
//        }
//        if(a[i]==-INF)
//            a[i] = MAX_VALUE;
//    }

//    return a;
}
//vector<long long> CalcA(vector<vector<long long>> &q,int n) {
//    auto m = q.size();
//    vector<long long> a(n,-INF);
//    for (int i = 0; i < n; ++i) {
//        for (int j = 0; j < m; ++j) {
//            if(q[j][0]<=i && i<=q[j][1] && a[i]<q[j][2]){
//                a[i]=q[j][2];
//            }
//        }
//        if(a[i]==-INF)
//            a[i] = MAX_VALUE;
//    }
//    return a;
//}

/**
 * Считаем SparseTable
 * @param a вектор элементов.
 * @return разряженая таблица.
 */
void FillTable(const long long *a, long long *table, int n, int k_max) {
    for (int i = 0; i < n; ++i) {
        table[i + n * 0] = a[i];
    }
    for (int k = 1; k < k_max; ++k) {
        long k2 = 1 << (k - 1);
        int tdx = n * k;
        int dx = tdx - n;
        for (int l = 0; l < n; ++l) {
            long long m2 = MOD;
            if (l + k2 < n)
                m2 = table[l + k2 + dx];
            table[l + tdx] = min(table[l + dx], m2);
        }
    }
}

/**
 * @param table разряженая таблица.
 * @param u начало отрезка.
 * @param v конец отрезка.
 * @return min на отрезке.
 */
long long rmq(const long long *table, int n, long u, long v) {
    long l, r;
    if (u < v) {
        l = u;
        r = v;
    } else {
        l = v;
        r = u;
    }
    long k = 1;
    long k2 = 2;
    while (k2 < r - l + 1) {
        k++;
        k2 = k2 << 1;
    }
    k--;
    k2 = k2 >> 1;
    auto m1 = table[l + n * k];
    auto m2 = table[r - k2 + 1 + n * k];
    return min(m1, m2);
}

bool check(const long long *a, int n, const long long* q,int m) {
    long k_max = 1;
    long temp = 2;
    while (temp < n) {
        temp = temp << 1;
        k_max++;
    }
//    vector<vector<long long>> table(n, vector<long long>(k_max));
    auto *table = new long long[n * k_max];
//    auto table =
    FillTable(a, table, n, k_max);
    bool consistent = true;
    for (int i = 0; i < m; ++i) {
        int dx = i * 3;
        auto answer = rmq(table, n, (long) q[dx + 0], (long) q[dx + 1]);
        if (answer != q[dx + 2]) {
            consistent = false;
            break;
        }
    }

    delete[]table;
    return consistent;
}


//#define fin cin
//#define fout cout

int main() {
    int n, m;
    ifstream fin("rmq.in");
    ofstream fout("rmq.out");


    fin >> n >> m;

//    vector<vector<long long>> q(m, vector<long long>(3));
    auto *q = new long long[m*3];
    for (int i = 0; i < m; ++i) {
        fin >> q[i*3+0] >> q[i*3+1] >> q[i*3+2];
        q[i*3+0]--;
        q[i*3+1]--;
    }
//    vector<long long> a(n, MAX_VALUE);
#ifdef _DEBUG_
    Timer t;
#endif
    auto *a = new long long[n];
    fill(&a[0], &a[0] + n, -INF);

    FillA(q,m, n, a);
    auto consistent = check(a, n, q,m);
#ifdef _DEBUG_
    t.print("all");
#endif
    if (consistent) {
        fout << "consistent" << "\n";
        for (int i = 0; i < n; ++i) {
            fout << a[i] << " ";
        }
    } else {
        fout << "inconsistent" << "\n";
    }
    fout << flush;
    delete[] a;
    delete[] q;
    return 0;
}
//int main(){
//    std::uniform_int_distribution<long long > rnd(0, 1e7);
//    std::default_random_engine re(17);
//
//    int n = 100000;
//    int m = 100000;
//    long long *a = new long long [n];
//    for (int i = 0; i < n; ++i) {
//        a[i] = rnd(re);
//    }
//
//    long k_max = 1;
//    long temp = 2;
//    while (temp < n) {
//        temp = temp << 1;
//        k_max++;
//    }
//    auto *table = new long long[n * k_max];
//    FillTable(a, table, n, k_max);
//
//    std::uniform_int_distribution<long long > rndPos(1, n);
//    ofstream fout("rmq.in");
//    fout<<n<<" "<<m<<endl;
//    for (int i = 0; i < m; ++i) {
//        auto b1 = rndPos(re);
//        auto b2 = rndPos(re);
//        auto l = min(b1, b2);
//        auto r = max(b1, b2);
//        auto answer = rmq(table, n, l, r);
//        fout<<l<<" "<<r<<" "<<answer<<endl;
//    }
//
//    delete[]table;
//    delete[]a;
//
//    return 0;
//}

/**
3 2
2 3 2
1 2 1

consistent
1 2 2

3 3
1 2 1
1 1 2
2 3 2
inconsistent

2 2
1 2 2
1 2 1

 3 3
 1 2 1
 2 3 2
 3 3 1

 5 2
 1 1 1
 5 5 2

 5 3
 1 5 1
 3 5 2
 4 4 3
*/