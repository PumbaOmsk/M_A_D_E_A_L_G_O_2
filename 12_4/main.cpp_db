/**
 * Введенский Вячеслав В. MADE-ML-22
 *
D. Ненокку. Суффиксное дерево с обновлением.
 */

#include <iostream>
#include <unordered_map>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>

static const int MAX_LENGTH = 15000000;
static const int BUF_SIZE = 100000;

using namespace std;

/// структура для хранения дерева
struct Node {
//    Node(int _index, int _l, int _r, Node *_parent) : index(_index), l(_l), r(_r), parent(_parent), link(nullptr) {
//        dl = r - l;
//    }
    Node()= default;
//    ~Node() {
//        for (auto child:childs) {
//            delete child.second;
//        }
//    }

    inline int len(){return r-l;}
    int l = 0, r = 0;//, dl = 0; // индексация ребра в строке
    Node *parent = nullptr; // родитель
    Node *link = nullptr;   // суффиксная ссылка
    Node *childs[27] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
                        nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
                        nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr};
//    std::unordered_map<char, Node *> childs; // детишки, для букв. Можно сюда массив запихать
//    int index = -1; // номер вершины

//    long long leafCount = -1;

    // указатель на вершину по букве
    inline Node *get(char c) {
//        if (!childs.count(c)) return nullptr;
//        return childs[c];
//        if(c=='$')
//            return childs[26];
        return childs[c - 'a'];
    }

//    bool leaf = true;

    // добавить вершину по букве
    inline void set(char c, Node *node) {
//        childs[c] = node;

        childs[c - 'a'] = node;
//        leaf = false;

//        if(c=='$')
//            childs[26] = node;
//        else {
//            childs[c - 'a'] = node;
//        }
    }
};

/// положение в дереве
struct Position {
    explicit Position(Node *_v, int _idx) : v(_v), idx(_idx) {}

    Position() = default;

    Node *v = nullptr; // текущая вершина
    int idx = 0; // сдвиг в подстроке
};

/// суффиксное дерево
class SuffixTree {
public:
    ~SuffixTree();

    SuffixTree();

    void print();

    // финальная печать ребер дерева
    void printEdges();

    // количество различных подстрок
    long long computeSubString();

    // посчитать количество листов под каждой вершиной.
    void computeLeaf();

    // поиск подстроки
    Node *find(const string &s);

    // добавить строку к текущей
    void add(const string &s);


private:
    // строка, по которой построено дерево
    string _base;
    const char *base;
    size_t b_len=0;
    // текущий номер вершины
//    int currentIndex;
    // наибольший суффик, который не в терминальной вершине
    Position cursor;
    // если будет тупить, то можно заранее выделить память массив и просто дописывать туда по номеру вершины
    list<Node *> mem_bufs;
    Node *mem_buf;
    int i_buf=0;

    Node *root;
//    vector<Node *> terminals;
    Node** terminals;
    int i_term=0;

    void print(Node *pNode);

    // обработать следующий символ
    void nextChar(int idx);

    // найти позицию для перехода
    Position findPosition(Position from, int l, int r);

    // разрезать ребро по позиции, возвращает указатель на разрез
    Node *splitEdge(Position pos);

    // найти куда должна вести суфф ссылка
    Node *computeLink(Node *v);

    // обновить листики
    void updateLeaf();

    Node *createNode(int l, int r, Node *parent);
};

SuffixTree::~SuffixTree() {
//    delete root;
    for (auto buf:mem_bufs){
        delete []buf;
    }
//    delete[] mem_buf;
    delete[]terminals;
}

Node *SuffixTree::createNode(int l, int r, Node *parent) {
    if(i_buf>=BUF_SIZE){
        i_buf=0;
        mem_buf = new Node[BUF_SIZE];
        mem_bufs.push_back(mem_buf);
    }
    Node *newNode = &mem_buf[i_buf++];
//    newNode->index = ++currentIndex;
    newNode->l = l;
    newNode->r = r;
//    newNode->dl = r - l;
    newNode->parent = parent;
    return newNode;

//    Node *newNode = new Node(++currentIndex, l, r, parent);
//    newNode->leafCount = -1;
//    newNode->leaf = true;
//    return newNode;
}

SuffixTree::SuffixTree() {
    i_buf=0;
    mem_buf = new Node[BUF_SIZE];
    mem_bufs.push_back(mem_buf);
    terminals = new Node*[MAX_LENGTH];
//    currentIndex = 0;
    root = createNode(0, 0, nullptr);
    cursor = Position(root, 0);
}

// для сортировки ребер, если надо
//bool comp(Node *e1, Node *e2) {
//    return e1->l < e2->l;
//}

//void SuffixTree::printEdges() {
//    list<Node *> q;
//    q.push_back(root);
//    for (auto it = q.begin(); it != q.end(); it++) {
//        auto cur = *it;
//        for (auto child:cur->childs) {
////            if (child != nullptr)
////                q.push_back(child);
//            q.push_back(child.second);
//        }
//    }
////    q.sort(comp);
//    cout << q.size() << " " << q.size() - 1 << endl;
//    for (auto cur:q) {
////        if (cur->isRoot())
//        if (cur->parent == nullptr)
//            continue;
//        cout << cur->parent->index << " " << cur->index << " " << cur->l + 1 << " " << cur->r << endl;
//    }
//}

Position SuffixTree::findPosition(Position from, int l, int r) {
    Node *v = from.v;
    int fdl = v->len();
    int f_idx = from.idx;
    while (l < r) {
//        if (from.idx == from.v->dl) {

        if (f_idx == fdl) {
            from = Position(v->get(base[l]), 0);
            if (from.v == nullptr)
                return from;
            v = from.v;
            f_idx = from.idx;
            fdl = v->len();
        } else {
            if (base[v->l + f_idx] != base[l])
                return Position(nullptr, 0);
            auto dl = r - l;
//            auto fdl = from.v->dl;
//            auto fdl = from.v->len();
            if (dl < fdl - f_idx)
                return Position(v, f_idx + dl);
            l += fdl - f_idx;
            from.idx = fdl;
            f_idx = from.idx;
        }
    }
    return from;
}

Node *SuffixTree::splitEdge(Position pos) {
//    if (pos.idx == pos.v->dl)
    if (pos.idx == pos.v->len())
        return pos.v;
    if (pos.idx == 0)
        return pos.v->parent;
    Node *cur = pos.v;
    Node *newNode = createNode(cur->l, cur->l + pos.idx, cur->parent);
    cur->parent->set(base[cur->l], newNode);
    newNode->set(base[cur->l + pos.idx], pos.v);
    pos.v->parent = newNode;
    pos.v->l += pos.idx;
//    pos.v->dl = pos.v->r - pos.v->l;
    return newNode;
}

Node *SuffixTree::computeLink(Node *v) {
    if (v->link != nullptr) return v->link;
    if (v->parent == nullptr) return root;
    Node *to = computeLink(v->parent);
//    auto end_pos = Position(to, to->dl);
    auto end_pos = Position(to, to->len());
    int add = 0;
    if (v->parent->parent == nullptr)
        add = 1;
    auto target = findPosition(end_pos, v->l + add, v->r);
    v->link = splitEdge(target);
    return v->link;
}

void SuffixTree::nextChar(int idx) {
    while (true) {
        Position fnd = findPosition(cursor, idx, idx + 1);
        if (fnd.v != nullptr) {
            cursor = fnd;
            return;
        }
        Node *splitNode = splitEdge(cursor);
        Node *node = createNode(idx, b_len, splitNode);
//        terminals.push_back(node);
        terminals[i_term++]=node;
        splitNode->set(base[idx], node);
        cursor.v = computeLink(splitNode);
//        cursor.idx = cursor.v->dl;
        cursor.idx = cursor.v->len();
        if (splitNode == root) break;
    }
}

void SuffixTree::updateLeaf() {
//    auto len = base.length();

//    for (int i = terminals.size()-1; i>=0  ; --i) {
    for (int i = 0; i<i_term  ; i++) {
        terminals[i]->r = b_len;
//        terminals[i]->dl = terminals[i]->r-terminals[i]->l;
    }
//    for (auto node:terminals) {
//        node->r = len;
//        node->dl = node->r - node->l;
//    }
}

void SuffixTree::add(const string &s) {
    int old_len = static_cast<int>(_base.length());
    _base = _base + s;
    base = _base.c_str();
    b_len = _base.length();
    updateLeaf();
    for (int i = old_len; i < b_len; ++i) {
        nextChar(i);
    }
}

long long SuffixTree::computeSubString() {
    queue<Node *> q;
    q.push(root);
    long long result = 0;
    while (!q.empty()) {
        auto cur = q.front();
        q.pop();
        for (auto child:cur->childs) {
            if (child != nullptr)
                q.push(child);
//            q.push(child.second);
        }
        if (cur->parent != nullptr) {
//            result += cur->dl;
            result += cur->len();
        }
    }
    return result;
}

//void SuffixTree::computeLeaf() {
//    int cur = -1;
//    Node **s = new Node *[currentIndex];
//    s[++cur] = root;
//    while (cur >= 0) {
//        auto v = s[cur];
//        if (v->leafCount > -1) {
//            cur--;
//            if (v->parent != nullptr)
//                v->parent->leafCount += v->leafCount;
//        } else {
//            if (v->leaf) {
//                v->leafCount = 1;
//            } else {
//                v->leafCount = 0;
//                for (auto child:v->childs) {
//                    if (child != nullptr)
//                        s[++cur] = child;
//                }
//            }
//        }
//    }
//    delete[]s;
//}

Node *SuffixTree::find(const string &s) {
    Node *cur = root;
    int idx = 0;
    int i = 0;
    while (i < s.length()) {
        char c = s[i];
//        while (idx < cur->dl) {
        while (idx < cur->len()) {
            if (base[cur->l + idx] != c) {
                return nullptr;
            }
            idx++;
            ++i;
            if (i >= s.length())
                return cur;
            c = s[i];
        }
        auto child = cur->get(c);
        if (child == nullptr) {
            return nullptr;
        } else {
            cur = child;
            idx = 0;
        }
    }
    return cur;
}


//#include <random>
//string gen_string(int n,int seed){
//    std::uniform_int_distribution<uint32_t> rnd('a', 'z');
//    std::default_random_engine re(seed);
//    char *c = new char[n+1];
//    for (int i = 0; i <n ; ++i) {
//        c[i] = rnd(re);
//    }
//    c[n]=0;
//    string s(c);
//    delete []c;
//    return s;
//}
//#include <chrono>
//#include <iostream>
//
//class Timer {
//    using clock_t = std::chrono::high_resolution_clock;
//    using microseconds = std::chrono::microseconds;
//public:
//    Timer() : start_(clock_t::now()) {}
//
//    ~Timer() = default;
//
//    void print(const std::string &s, int count) {
//        const auto finish = clock_t::now();
//        const auto us =
//                std::chrono::duration_cast<microseconds>
//                        (finish - start_).count();
//        std::cout << s << ": " << us / count << " us" << std::endl;
//    }
//
//    void print(const std::string &s) {
//        print(s, 1);
//    }
//
//private:
//    const clock_t::time_point start_;
//};



int main() {
    std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0);


//    SuffixTree tree;
//
//    Timer tt;
//    for (int i = 0; i < 50; ++i) {
//        string s = gen_string(100000,17+i);
//        tree.add(s);
//        Node *v = tree.find(s);
//    }
//
//    tt.print("run");


    SuffixTree tree;
    string sin;
    while (!getline(cin, sin).eof()) {
        if (sin.length() == 0)
            break;
        char c = sin[0];
        string s;
        transform(sin.begin() + 2, sin.end(), back_inserter(s), (int (*)(int)) std::tolower);
        if (c == '?') {
            Node *v = tree.find(s);
            if (v == nullptr)
                cout << "NO\n";
            else
                cout << "YES\n";
        } else {
            tree.add(s);
        }
    }
    cout << endl;
    return 0;
}
